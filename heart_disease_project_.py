# -*- coding: utf-8 -*-
"""heart disease.project .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hggr_4qNkVeXgB6prS6TRqbeI5vU7bqO
"""



import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading csv file
heart_data = pd.read_csv('/content/dataset (1).csv')

#printing the first five rows into the data set
heart_data.head()

#to print the last five rows of the datse
heart_data.tail()

#number  of rows and columns in the data set
heart_data.shape

#getting the some information abot the data
heart_data.info()

#checking the missing values
heart_data.isnull().sum()

#statstical measurement about the data
heart_data.describe()

# checking the distribution of the target vsrisble
heart_data['target'].value_counts()

"""-->Defective Heart
--> healty heart

"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

#splliting =the data set inr=to tarring and testing data set
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

#Model traing
#Logistic Regression
model = LogisticRegression()

#traing thre logisy[tic regressin with the traing data set]
model.fit(X_train, Y_train)

#model evaluation
#accury on the taring dataset
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy )

# on the taring dataset
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test  data : ', test_data_accuracy )

#building predictive system
input_data = (70,1,2,160,269,0,1,112,1,2.9,1,1,3)
#change the input data to numpay array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the impyt array aas  we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print('The person does not have heart disease')
else:
  print('The persone has heart disese')